[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "contextinator"
version = "0.1.0"
description = "Intelligent Codebase Understanding for AI Agents - Transform any codebase into semantically-aware, searchable knowledge"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "STARTHACK Team", email = "founders@starthack.io"}
]
keywords = [
    "ai", "code-analysis", "ast", "embeddings", "vector-search", 
    "semantic-search", "codebase", "tree-sitter", "chromadb"
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache 2.0",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3.11",
    "Topic :: Software Development :: Code Generators",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
requires-python = ">=3.11"
dependencies = [
    "tree-sitter>=0.25.0",
    "chromadb>=1.3.0",
    "openai>=2.6.0",
    "tiktoken>=0.12.0",
    "python-dotenv>=1.2.0",
    "flask>=3.1.0",
    "requests>=2.32.0",
    "tree-sitter-python>=0.25.0",
    "tree-sitter-javascript>=0.25.0",
    "tree-sitter-typescript>=0.23.0",
    "tree-sitter-java>=0.23.0",
    "tree-sitter-go>=0.25.0",
    "tree-sitter-rust>=0.24.0",
    "tree-sitter-cpp>=0.23.0",
    "tree-sitter-c>=0.24.0",
    "tree-sitter-c-sharp>=0.23.0",
    "tree-sitter-php>=0.24.0",
    "tree-sitter-bash>=0.25.0",
    "tree-sitter-sql>=0.3.0",
    "tree-sitter-kotlin>=1.1.0",
    "tree-sitter-yaml>=0.7.0",
    "tree-sitter-markdown>=0.5.0",
    "tree-sitter-dockerfile>=0.0.0a1",
    "tree-sitter-json>=0.24.0",
    "tree-sitter-toml>=0.7.0",
    "tree-sitter-swift>=0.0.1",
    "tree-sitter-solidity>=1.2.0",
    "tree-sitter-lua>=0.2.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
]
docs = [
    "sphinx>=7.0.0",
    "sphinx-rtd-theme>=1.3.0",
    "myst-parser>=2.0.0",
]

[project.urls]
Homepage = "https://github.com/starthackHQ/Contextinator"
Documentation = "https://github.com/starthackHQ/Contextinator/docs"
Repository = "https://github.com/starthackHQ/Contextinator"
Issues = "https://github.com/starthackHQ/Contextinator/issues"

[project.scripts]
contextinator = "contextinator.cli:main"

[tool.setuptools]
package-dir = {"" = "src"}

[tool.setuptools.packages.find]
where = ["src"]
include = ["contextinator*"]

[tool.setuptools.package-data]
contextinator = ["py.typed"]

[tool.black]
line-length = 100
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

[tool.coverage.run]
source = ["src/contextinator"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
